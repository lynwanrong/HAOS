substitutions:
  remote_fan_entity_id: fan.dimmeradruino_kitchen_lights

esphome:
  name: matouchai28-company
  friendly_name: MatouchAi28-Company

  on_boot: 
    priority: -10
    then:
      - lambda: 'lv_obj_add_state(id(light_slider), LV_STATE_DISABLED);'


globals:
  - id: remote_brightness
    type: int
    restore_value: yes
    initial_value: '0'

esp32:
  board: esp32-s3-devkitc-1
  variant: esp32s3
  flash_size: 16MB
  framework:
    type: esp-idf
    version: recommended
    sdkconfig_options:
      CONFIG_ESP32S3_DEFAULT_CPU_FREQ_240: "y"
      CONFIG_ESP32S3_DATA_CACHE_64KB: "y"
      CONFIG_SPIRAM_FETCH_INSTRUCTIONS: y
      CONFIG_SPIRAM_RODATA: y
      CONFIG_COMPILER_OPTIMIZATION_PERF: y
      CONFIG_FREERTOS_UNICORE: n
      CONFIG_FREERTOS_TIMER_TASK_STACK_DEPTH: "4096"
      CONFIG_FREERTOS_TASK_NOTIFICATION_ARRAY_ENTRIES: "3"

psram:
  mode: octal
  speed: 80MHz

logger:
  level: DEBUG

api:
  encryption:
    key: "yRI2xTIg/1y9ssYb3rC9jUArkG8G52sC0M4SUaPyV6o="

ota:
  - platform: esphome
    password: "20d095beb2c1882ce47a255316d5aadb"

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  ap:
    ssid: "Matouchai28-Company"
    password: "88888888"

captive_portal:

output:
  - platform: ledc
    pin:
      number: GPIO45
      ignore_strapping_warning: true
    frequency: 20000hz
    id: lcd_pwm
    
light:
  - platform: monochromatic
    name: "lcd pwm"
    output: lcd_pwm
    id: lcd_backlight
    restore_mode: ALWAYS_ON

spi:
  - id: display_spi
    clk_pin: GPIO48
    mosi_pin: GPIO13

i2c:
  - id: touch_i2c
    sda: GPIO39
    scl: GPIO38
    scan: False

font:
  - file: "gfonts://Roboto"
    id: my_font
    size: 20
  - file: "gfonts://Roboto"
    id: small_font
    size: 16

display:
  - platform: ili9xxx
    id: tft_display
    model: st7789v
    spi_id: display_spi
    cs_pin: GPIO40
    dc_pin: GPIO21
    # reset_pin: GPIO4 
    data_rate: 40MHz
    dimensions:
      width: 240
      height: 320
    transform:
      swap_xy: False
      mirror_x: False
      mirror_y: False
    color_order: BGR
    invert_colors: True
    auto_clear_enabled: false
    update_interval: never

lvgl:
  pages:
    - id: main_page # Default page
      widgets:
        - switch:
            id: toggle_switch
            x: 100
            y: 10
            width: 50
            height: 25
            on_value:
              - if:
                  condition:
                    lambda: 'return x;'
                  then:
                    - logger.log: "Kitchen light ON"
                    - homeassistant.action:
                        action: fan.turn_on
                        data:
                          entity_id: ${remote_fan_entity_id}
                    - lvgl.label.update:
                        id: brightness_label
                        text: !lambda |-
                          char buffer[5];
                          snprintf(buffer, sizeof(buffer), "%d%%", id(remote_brightness));
                          return buffer;   
                    - lvgl.slider.update:
                        id: light_slider
                        value: !lambda 'return id(remote_brightness);'
                    - lambda: 'lv_obj_clear_state(id(light_slider), LV_STATE_DISABLED);'
                  else:
                    - logger.log: "Kitchen light OFF"
                    - homeassistant.action:
                        action: fan.turn_off
                        data:
                          entity_id: ${remote_fan_entity_id}
                    - lvgl.label.update:
                        id: brightness_label
                        text: "0%"
                    - lvgl.slider.update:
                        id: light_slider
                        value: 0
                    - lambda: 'lv_obj_add_state(id(light_slider), LV_STATE_DISABLED);'
        - slider:
            id: light_slider
            x: 53
            y: 290
            width: 150
            height: 20
            value: 0
            min_value: 0
            max_value: 100
            # on_... : # Add event handlers
            on_value:
              - lvgl.label.update:
                  id: brightness_label
                  text: !lambda |-
                    char buffer[5];
                    snprintf(buffer, sizeof(buffer), "%.0f%%", x);
                    return buffer;   
            on_release:
              - if:
                  condition:
                    lambda: 'return lv_obj_get_state(id(toggle_switch)) & LV_STATE_CHECKED;'
                  then:
                    - homeassistant.action:
                        action: fan.set_percentage
                        data:
                          entity_id: ${remote_fan_entity_id}
                          percentage: !lambda 'return (int)(x);'
        - label:
            id: brightness_label
            x: 110
            y: 160
            text: 0%

  on_idle:
    timeout: !lambda "return (id(display_timeout).state * 1000);"
    then:
      - logger.log: "LVGL is idle, pausing and turning off backlight."
      - lvgl.pause:
      - light.turn_off:
          id: lcd_backlight
          transition_length: 5s

touchscreen:
  - platform: gt911
    display: tft_display
    id: touch_screen
    update_interval: 50ms
    reset_pin: GPIO18
    interrupt_pin: GPIO14
    i2c_id: touch_i2c
    transform:
      swap_xy: False
      mirror_x: False
      mirror_y: False
    on_release: 
      - if: 
          condition: 
            lvgl.is_paused:
          then: 
            - logger.log: "LVGL resuming"
            - light.turn_on: lcd_backlight
            - lvgl.resume:
            - lvgl.widget.redraw:

number:
  - platform: template
    name: LVGL Screen timeout
    optimistic: true
    id: display_timeout
    unit_of_measurement: "s"
    initial_value: 45
    restore_value: true
    min_value: 10
    max_value: 180
    step: 5
    mode: box

sensor:
  - platform: homeassistant
    id: remote_light_brightness
    entity_id: ${remote_fan_entity_id}
    attribute: percentage
    internal: True
    on_value:
      - lambda: |-
          id(remote_brightness) = (int)(x);
      - if:
          condition:
            lambda: 'return lv_obj_get_state(id(toggle_switch)) & LV_STATE_CHECKED;'
          then:
            - lvgl.slider.update:
                id: light_slider
                value: !lambda 'return x;'

      

binary_sensor:
  - platform: homeassistant
    id: remote_light_state
    entity_id: ${remote_fan_entity_id}
    internal: true
    on_state:
      - if:
          condition:
            binary_sensor.is_on: remote_light_state
          then:
            - lvgl.switch.update:
                id: toggle_switch
                state:
                  checked: true
            - lvgl.label.update:
                id: brightness_label
                text: !lambda |-
                  char buffer[5];
                  snprintf(buffer, sizeof(buffer), "%.f%%", id(remote_brightness));
                  return buffer;
            - lvgl.slider.update:
                id: light_slider
                value: !lambda 'return id(remote_brightness);'
            - lambda: 'lv_obj_clear_state(id(light_slider), LV_STATE_DISABLED);'
          else:
            - lvgl.switch.update:
                id: toggle_switch
                state:
                  checked: false
            - lvgl.label.update:
                id: brightness_label
                text: "0%"
            - lvgl.slider.update:
                id: light_slider
                value: 0
            - lambda: 'lv_obj_add_state(id(light_slider), LV_STATE_DISABLED);'